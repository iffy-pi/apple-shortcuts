'''
TODO:
- Update saving to backlog
- Revamp log algorithm to work with dictionaries!

DONE:
- Made new storage format for backlog
Backlog will be managed as a JSON formatted list:
{
	backlog: [
			{
				Date: '...',
				Food: ...,
			},
			...
		]
}
saved to STORE/Other/backlog.json


INFO:
Current file structure (FLS):
- Presets
	- presetNames.txt
	- Foods
		- ...
- Other
	- backlog.txt and backtag.txt => backlog.json
		Old backlog text was of format:
			"
			{ Date: ... , Food: ...}
			...
			"
		That is, dictionary object on separate lines
		To conver to new format, split file by newlines and then add each dictionary to a list
		Then set list to contents

SHORTCUTS:
{
   "Edit Preset":"Edit Preset2.0",
   "Correct Dictionary":"Correct Dictionary",
   "Food History":"Food History",
   "Foods List":"Foods List 1.3",
   "Bulk Entry":"Bulk Entry",
   "Plot Week Summary":"Plot Week Summary",
   "Log Algorithm":"Log Algorithm",
   "Edit Barcode":"Edit Barcode",
   "Day Summary":"Day Summary",
   "Get Barcode":"Get Barcode",
   "NutrDix":"NutrDix",
   "Remove Barcode":"Remove Barcode",
   "Plot Day Summary":"Plot Day Summary",
   "Remove Preset":"Remove Preset2.0",
   "NutrDix Updater":"Nutri-Hub",
   "Get History On":"Get History On",
   "Barcode Search":"Barcode Search",
   "Number Converter":"Number Converter",
   "Manual Logging":"Manual Logging 3",
   "Make Food Item":"Make Food Item",
   "Nutrition":"Nutrition",
   "Get Preset":"Get Preset",
   "Get Recent":"Get Recent",
   "Add Recents":"Add Recents",
   "Week Summary":"Week Summary",
   "Search Algorithm":"Search Algorithm",
   "Display Food Item":"Display Food Item 1.2",
   "Add Preset":"Add Preset 1.1",
   "Make Preset":"Make Preset 2.2"
}
'''

# GLOBAL VARS
STORE = "Shortcuts/FLS"

#---------------------------------------------------------------------------------------------------------------------------------
# TO USE #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
def ConvertTextFileToJSON():
	GetFile(f"{folder}/{filename}.txt")
	RenameFile(f"{filename}.json")


#---------------------------------------------------------------------------------------------------------------------------------
# UPDATER #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
def NutriDixUpdater():
	pass

#---------------------------------------------------------------------------------------------------------------------------------
# WEEK SUMMARY #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
def WeekSummary():
	pass

#---------------------------------------------------------------------------------------------------------------------------------
# HISTORY #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------

def FoodHistory():
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def AddToFoodHistory():

#---------------------------------------------------------------------------------------------------------------------------------
# BARCODES #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------

def BarcodeSearch():
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def GetBarcode():
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def EditBarcode():
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def RemoveBarcode():
	pass

#---------------------------------------------------------------------------------------------------------------------------------
# PRESETS #---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
def RemovePreset():
	pass

#---------------------------------------------------------------------------------------------------------------------------------
def GetPreset(): # Get Preset
	pass
#---------------------------------------------------------------------------------------------------------------------------------

def MakePreset(): # Make Preset
	pass
#---------------------------------------------------------------------------------------------------------------------------------

def EditPreset(): # Edit Preset
	pass

#---------------------------------------------------------------------------------------------------------------------------------
def RemovePreset():
	pass

#---------------------------------------------------------------------------------------------------------------------------------
# MISC #---------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------

def BulkEntry(): # Bulk Entry
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def FoodsList(): # Foods List
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def GetRecent(): # "Get Recent"
	pass

#---------------------------------------------------------------------------------------------------------------------------------
# SHARED ---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------

def LogAlgorithm(dix): # Log Algorithm
	'''
	Update to use new backlog system
	Update to use dictionary from input
	{
		'Date':..
		'Food':...
	}
	'''

	'''
	Changelist:
	- Removed contin
	'''

	TRUE = 1
	FALSE = 0

	nutrDix = Dictionary(run("NutrDix"))

	res = Dictionary(ShortcutInput)

	loggingDate = Date(res['Date'])
	foodDix = Dictionary(res['Food'])

	foodName = foodDix['Name']
	servingSize = foodDix['Serving Size']

	dixValue = foodDix['Servings']
	if res is None:
		IFRESULT = AskForInput(Input.Number, prompt=f"How many servings? (1 serving = {servingSize})",
					default=1, allowDecimals=True, allowNegatives=True)
	else:
		IFRESULT = GetNumbers(dixValue)

	# set servings in food dictionary
	mulitplier = IFRESULT
	foodDix['Servings'] = multiplier
	foodDix = run(nutrDix["Correct Dictionary"], input=foodDix)
	servings = Number(foodDix['Servings'])


	# get health app environment var
	dix = Dictionary(GetFile(f"{STORE}/Other/env.json"))
	hasHelathApp = dix['HasHealthApp']

	# add to backlog and exit if we are not on a device with a health app
	if hasHealthApp == FALSE:
		Notification(
			"Food will be logged when next on iPhone",
			title=f'{foodName} Has Been Added to Backlog',
		)

		# get the backlog file 
		file = GetFile(f"{STORE}/Other/backlog.json", noErrors=True)

		if file is not None:
			IFRESULT = Dictionary(file)
		else:
			IFRESULT = { 'backlog': [] }

		backlog = IFRESULT['backlog']

		dix = {
			'Date': Text(loggingDate),
			'Food': Text(foodDix)
		}
		backlog.append(dix)

		# add it to list

		# save file
		dix = { 'backlog': backlog }
		SaveFile(dix, f"{STORE}/Other/backlog.json", overwrite=True)

		return foodDix


	# comment set of nutrients logged by the system
	text = "Protein",
	      "Trans",
	      "Cholesterol",
	      "Sugar",
	      "Monounsaturated",
	      "Polyunsaturated",
	      "Fat",
	      "Fiber",
	      "VitC",
	      "Calories",
	      "Iron",
	      "VitA",
	      "Potassium",
	      "Saturated",
	      "Sodium",
	      "Calcium",
	      "Carbs",

	nutrients = Dictionary()

	# store the nutrients in the dictionary
	for item in SplitText(text, ByNewLines):
		num = GetNumbers(foodDix[item])
		if num > 0:
			num = num * servings
			num = Round(num, "hundredths")
			nutrients[item] = num

	# now just go through each nutrient and add them 
	if nutrients["Carbs"] is not None:
		LogHealthSample("Carbohydrates", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Fiber"] is not None:
		LogHealthSample("Fiber", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Sugar"] is not None:
		LogHealthSample("Dietary Sugar", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Fat"] is not None:
		LogHealthSample("Total Fat", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Polyunsaturated"] is not None:
		LogHealthSample("Polyunsaturated Fat", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Monounsaturated"] is not None:
		LogHealthSample("Monounsaturated Fat", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Saturated"] is not None:
		LogHealthSample("Saturated Fat", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Protein"] is not None:
		LogHealthSample("Protein", nutrients[@aboveKey], "g", loggingDate)

	if nutrients["Sodium"] is not None:
		LogHealthSample("Sodium", nutrients[@aboveKey], "mg", loggingDate)

	if nutrients["Potassium"] is not None:
		LogHealthSample("Potassium", nutrients[@aboveKey], "mg", loggingDate)

	if nutrients["Cholesterol"] is not None:
		LogHealthSample("Dietary Cholesterol", nutrients[@aboveKey], "mg", loggingDate)

	if nutrients["VitA"] is not None:
		LogHealthSample("Vitamin A", nutrients[@aboveKey], "mcg", loggingDate)

	if nutrients["VitC"] is not None:
		LogHealthSample("Vitamin C", nutrients[@aboveKey], "mg", loggingDate)

	if nutrients["Calcium"] is not None:
		LogHealthSample("Calcium", nutrients[@aboveKey], "mcg", loggingDate)

	if nutrients["Iron"] is not None:
		LogHealthSample("Iron", nutrients[@aboveKey], "mg", loggingDate)

	if nutrients["Calories"] is not None:
		LogHealthSample("Dietary Energy", nutrients[@aboveKey], "kcal", loggingDate)

	Notification(
		f'{foodName} has been logged to your meals',
		title='Yummy!'
	)

	# update history
	entry = f"{multiplier} x {foodName} ({nutrients['Calories']} kCal) | {loggingDate}"

	toPortOver = 0
	split = SplitText(entry, " | ")
	info = split[0]
	entryDate = Date(split[-1])
	dateKey = entryDate.format(date="short", time=None)

	file = GetFile(f"{STORE}/History/foodHistoryDix.txt", noErrors=True)

	'''
	Food history format:
	{
		'YYYY-MM-DD': {
			'HH-MM': food1,
			'HH-MM': food2
		}
	}
	'''

	'''
	{
		<date>: [
			{
				'Food': ...,
				'Servings': ...,
				'Total Calories': ...,
				'Time': ...
			},
			....
		]
	}
	'''


	if file is None:
		toPortOver = 1
		IFRESULT = { 'SAMPLE': 'SAMPLE' }
	else:
		IFRESULT = file

	foodHistoryDix = IFRESULT 

	dixval = foodHistoryDix[dateKey] 
	if dixval is None:
		# no entry for that date key, so this is the first food for that day
		# log in the format: time :  food info
		dix = {
			entryDate.format(date=None, time="short") : info
		}
		IFRESULT = dix
	else:
		# there is an entry for date
		# check if there is a time for the entry
		foodListDix = dixval
		
		dixval2 = foodListDix[entryDate.format(date=none, time="short")]
		if dixval2 is None:
			# no entry for this time so this is the only one
			IFRESULT = info
		else:
			# it does have entries, so just put it on newline
			listOfFoods = dixval2
			IFRESULT = f"{info}\n{listOfFoods}"

		foodListDix[entryDate.format(date=none, time="short")] = IFRESULT
		IFRESULT = foodListDix

	# log the changed dictionary
	foodHistoryDix[entryDate.format(date="short", time=None)] = IFRESULT

	SaveFile(foodHistoryDix, f"{STORE}/History/foodHistoryDix.txt", overwrite=True)

	# port over information from old format
	if toPortOver == 1:
		file = GetFile(f"{STORE}/History/foodHistory.txt")
		split = SplitText(file, ByNewLines)
		res = filter(
				split,
				where="Name" is not entry,
			)

		for item in res:
			run("Add To Food History", item)


	return foodDix


#---------------------------------------------------------------------------------------------------------------------------------

def DisplayFoodItem():
	pass

#---------------------------------------------------------------------------------------------------------------------------------

def SearchAlgorithm():
	pass


#---------------------------------------------------------------------------------------------------------------------------------

def NutriDix():
	return ;;

#---------------------------------------------------------------------------------------------------------------------------------

def SaveEnvVars(Dictionary(newVars)):
	# get the environment file
	# NOT DONE: SAVE TO ENVIRONMENT FILE SO SYSTEM HAS ACCESS TO IT
	GetFile(f"{STORE}/Other/env.json", noError=True)
	if file is not None:
		IFRESULT = Dictionary(file)
	else:
		IFRESULT = Dictionary()

	env = IFRESULT

	# overwrite keys
	for key in newVars.keys:
		env[key] = newVars[key]

	# save to file
	text = f"{env}"
	SaveFile(text, f"{STORE}/Other/env.json", overwrite=True)

#---------------------------------------------------------------------------------------------------------------------------------

def Nutrition():
	TRUE = 1
	FALSE = 0

	checkForUpdates = TRUE
	# user manually wants to clear backlog 
	reqBacklogClear = FALSE

	# load names of the shortcuts
	res = GetFile(f"{STORE}/Other/shortcutDix.txt")
	shortcutNames = Dictionary(res)

	# if device does not have health app then we will be adding to backlog
	hasHealthApp = FALSE
	if GetDeviceDetails("Model") == 'iPhone':
		hasHealthApp = TRUE

	# save the state of the health app to environment
	dix = { 'HasHealthApp': hasHealthApp }
	run(shortcutNames["Save Env Vars"], input=dix)


	# get backlog if it exists
	itemsInBacklog = FALSE
	file = GetFile(f"{STORE}/Other/backlog.json", noneIfNotExist=True)
	if file is not None:
		IFRESULT = Text(file)
	else:
		IFRESULT = "{ 'backlog': [] }"

	res = Dictionary(IFRESULT)
	backlog = res['backlog']

	if Count(backlog) > 0:
		itemsInBacklog = TRUE

	if hasHealthApp == FALSE:
		text = f"Foods logged on {deviceModel} will be added to backlog"

	else:
		calsToday = 0


		healthSamples = HealthApp.Find(
				AllHealthSamples,
				whereAllAreTrue=[
					Type="Dietary Energy",
					StartDate=Today,
				],
				Unit=cal
			)


		for sample in healthSamples:
			calsToday = Health.Sample.GetDetails(sample, "Value") + calsToday

		calsToday = Round (calsToday, "hundredths")

		IFRESULT = f"You've eaten {Ks} Calories Today."

	Prompt = IFRESULT

	mainMenu = Menu(prompt=prompt, options=[
			"Quick Log",
			"Log Foods",
			"Log Foods In Bulk",
			"Search and View",
			"Presets",
			"Barcodes",
			"Recent Meals",
			"Weekly Summary",
			"Food History",
			"Clear Backlog",
		])

	if mainMenu.opt("Quick Log"):
		# InRecents does not exist!
		for item in run(shortcutNames["Get Recent"], input=InRecents):
			CurFood = item
			text = f"How many servings of {CurFood['Name']}\n(1 serving = {CurFood['Serving Size']})"
			
			# translates to set dictionary value in CurFood and then set dictionary
			CurFood['Servings'] = AskForInput(text, Input.Number, default=1, allowDecimalNumbers=True, allowNegativeNumbers=True)

			dix = {
				'Date': str(Date.CurrentDate)
				'Food': dix(CurFood)
			}
			LogList.append(dix)

		for item in LogList:
			run(shortcutNames["Log Algorithm"], input=item)

		return

	elif mainMenu.opt("Log Foods"):
		if GetDeviceDetails("Model") == 'iPhone':
			# action will be discontinued in later versions
			ContinueInShortcutsApp()

		LoggedFoodsDix = {
			'SAMPLE' : 'SAMPLE'
		}

		Dating = AskForInput("What date and time? Click Done for Right Now", Input.DateAndTime)


		for item in run(shortcutNames["Foods List"]):
			CurFood = item
			dix = {
				'Date': str(Dating)
				'Food': dix(CurFood)
			}

			CurLoggedFood = run(shortcutNames["Log Algorithm"], input=dix)
			
			# Comment: Get the logged food dictionary and add it into the logged foods dix,
			# with key: servings of food and value: food dictionary

			roundedNumber = Round(Number(CurLoggedFood['Servings']), "Hundredths")
			LoggedFoodsDix[ f"{roundedNumber}x{CurLoggedFood['name']}" ] = CurLoggedFood


		makePresetMenu = Menu(prompt="Make Preset?", options=["Yes", "No"])

		if makePresetMenu.opt("Yes"):
			# Get the keys from the logged foods dix so users can select what foods they want to make into a preset
			res = Filter( 
				SplitText(Text(LoggedFoodsDix.Keys)), 
				where=[
					"Name" is not "SAMPLE",
				])

			chosenItems = ChooseFrom(res, prompt="Select Foods For Preset", selectMultiple=True)

			for item in chosenItems:
				# With each chosen key we use the key to retrieve the value from logged food dix
				# and add it to the list of foods to be made into a preset (chosenFoods)
				# each item in this case are the keys from the loggedfoodsdix
				ChosenFoods.Append( LoggedFoodsDix[item] )

			# run shortcutNames[make preset ]with chosen foods
			run(shortcutNames["Make Preset"], input=ChosenFoods)

		elif makePresetMenu.opt("No"):
			pass

	elif mainMenu.opt("Log Foods In Bulk"):
		if GetDeviceDetails("Model") == 'iPhone':
			# action will be discontinued in later versions
			ContinueInShortcutsApp()

		run(shortcutNames["Bulk Entry"])

	elif mainMenu.opt("Search and View"):
		# run shortcutNames[search algorithm ]and display food with 

		searchResult = run(shortcutNames["Display Food Item"], input=run(shortcutNames["Search Algorithm"]))

		postSearchMenu = Menu(["Log Entry", "Make Preset", "Exit"])

		if postSearchMenu.opt("Log Entry"):
			date = AskForInput("Date:", Input.DateAndTime, default=Date.CurrentDate)

			dix = {
				'Date': str(date)
				'Food': dix(searchResult)
			}
			res = run(shortcutNames[
				"Log Algorithm"],
				input=dix)

			LoggedFoods2 = res

			svp = Menu(["Yes", "No"], prompt="Save As Preset?")

			if svp.opt("Yes"):
				RunShorctut("Make Preset", input=LoggedFoods2)
			if svp.opt("No"):
				pass

		elif postSearchMenu.opt("Make Preset"):
			run(shortcutNames["Make Preset"], input=searchResult)

		elif postSearchMenu.opt("Exit"):
			pass

	elif mainMenu.opt("Presets"):

		prm = Menu(prompt="Presets", options=["View Presets", "Make Preset", "Edit Preset", "Remove Preset(s)"])

		if prm.opt("View Presets"):
			res = run(shortcutNames["Get Preset"])
			for repeatItem in res:
				run(shortcutNames["Display Food Item"], input=repeatItem)

		elif prm.opt("Make Preset"):
			# run shortcutNames[foods list ]to get list of foods to be made into a preset
			res = run(shortcutNames["Foods List"])

			for item in res:
				curFood = item
				loggedFoods3.append(curFood)

			run(shortcutNames["Make Preset"], loggedFoods3)


		elif prm.opt("Edit Preset"):
			run(shortcutNames["Edit Preset"])


		elif prm.opt("Remove Preset(s)"):
			# retrieve preset names, let user choose preset then retrieve food dix and delete it by runnshortcutNames[ing remove ]preset
			file = GetFile(f"{STORE}/Presets/presetNames.txt")
			res = SplitText(file, SplitText.ByNewLines)
			
			presetsToBeDeleted = ChooseFrom(res, selectMultiple=True)

			ShowAlert("Do You Want To Continue?", title="Presets About to Be Deleted", showCancel=True)

			for item in presetsToBeDeleted:
				file = GetFile(f"{STORE}/Presets/Foods/{item}.txt")
				text = file.read()
				run(shortcutNames["Remove Preset"], text)

	elif mainMenu.opt("Barcodes"):
		brm = Menu(prompt="Barcodes", options=[
			"View Personal Database",
			"Add to Personal Database",
			"Edit Items in Personal Database",
			"Remove From Personal Database"
			])


		if brm.opt("View Personal Database"):
			res = run(shortcutNames["Get Barcode"])
			for item in res:
				run(shortcutNames["Display Food Item"], input=item)

		elif brm.opt("Add to Personal Database"):
			run(shortcutNames["Barcode Search"])

		elif brm.opt("Edit Items in Personal Database"):
			run(shortcutNames["Edit Barcode"])

		elif brm.opt("Remove From Personal Database"):
			res = run(shortcutNames["Get Barcode"])
			run(shortcutNames["Remove Barcode"], input=res)
		

	elif mainMenu.opt("Recent Meals"):
		res = run(shortcutNames["Get Recent"])
		for item in res:
			run(shortcutNames["Display Food Item"], input=item)


	elif mainMenu.opt("Weekly Summary"):
		run(shortcutNames["Week Summary"])


	elif mainMenu.opt("Food History"):

		if itemsInBacklog == TRUE:
			ShowAlert("Please clear backlog before continuing")
		else:
			run(shortcutNames["Food History"])

	elif mainMenu.opt("Clear Backlog"):
		reqBacklogClear = TRUE


	# clearing the backlog
	if hasHealthApp == TRUE:

		if itemsInBacklog == TRUE:
			# clear items by logging them
			for item in backlog:
				run(shortcutNames["Log Algorithm"], input=item)

			# erase the backlog
			dix = { 'backlog': []}
			SaveFile(dix, path=f"{STORE}/Other/backlog.json")

		else:
			if reqBacklogClear == TRUE:
				# if user req clear backlog let them no there was nothing to clear
				ShowAlert("There are no foods in the backlog")

	if checkForUpdates == TRUE:
		run(shortcutNames["NutriDix Updater"])




