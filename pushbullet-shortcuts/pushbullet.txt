


def main(ShortcutInput, type="Any", source="Share Sheet", default="Clipboard"):
	'''
	Setup:
	- UpdateInfo['user']
	- AccessToken
	- TOADD: Pushbullet Premium

	TODO:
	- Add set up for pushbullet premium
	- Update MIME to remote calls to github pages

	DONE:
	- Add user selection of a type 
	'''

	UpdateInfo = {
		'updateLink': 'https://iffy-pi.github.io/apple-shortcuts/versioning/pushbullet/updates.json'
		'version': 1.41,
		'user': ''
	}

	UpdateRes = GetContentsOfURL(UpdateInfo['updateLink'])


	if Number(UpdateRes['version']) > UpdateInfo['version']:
		split = SplitText(UpdateRes['releaseNotes'], SplitText.By.NewLines)
		dt = Date(UpdateRes['releaseTime'])

		text = f'''
			Pushbullet Shortcut Update
			An update is available for this shortcut
			...
		'''
		note = CreateNote(Text)
		OpenNote(note)

		return

	AccessToken = '...'
	pushbulletPremium = 0

	# update this to remote calls
	mime = Text(File("mime.txt"))

	# copy from shortcut
	errorCodesInfo = '....'

	PushCall = {
		'push_url': '...',
		'upload_req_url': '...',
		'method': 'POST',
		'accesstoken': AccessToken
	}

	pushBody = {
		'type': '',
		'url': '',
		'body': '',
		'file_type': '',
		'file_name': '',
		'file_url': ''
	}

	failedPushes = []

	if ShortcutInput is None:
		ShowNotification("Nothing to Push!")
		return


	Contents = ShortcutInput

	typeId = {
		'link': 1,
		'note': 0
		'file': 2
	}

	for repeatItem in Contents:
		item = repeatItem

		curItemHandled = 0
		itemPushBody = pushBody
		

		pushType = -1

		itemType = GetTypeOf(item)
		itemFname = GetFileDetails("Name", item)
		itemFext = GetFileDetails("File Extension", item)

		itemErrorCode = 0
		itemErrorMsg = ''



		# find the type first then give it to the items
		# so we can add support for user types

		# -------------- ITEM TYPE -------------------------

		# do link
		if pushType == -1:
			files = Filter(
						itemType, 
						whereAny=[
							"Name" is "URL",
							"Name" is "Safari Web Page",
						],
						limit=1
					)

			if files is not None:
				pushType = 1

		# do note
		if pushType == -1:
			text = f"{itemType}/{itemFext}"

			# to be reviewed
			files = Filter(
						text, 
						whereAny=[
							"Name" is "Text/",
							"Name" is "Text/txt",
							"Name".beginsWith("Rich Text")
						],
						limit=1
					)

			if files is not None:
				pushType = 0

		# do file
		if pushType == -1:
			# do file by getting the mime type for it 
			if Mime[itemFext] is not None:
				pushType = 2


		if pushType == -1:
			# let user select
			typeMenu = Menu(
					prompt="The type of the input could not be determined. What is the type of the input?",
					[
						"Text",
						"Link/URL",
						"File"
					]
				)

			if typeMenu.selected == "Text":
				# set the push type to text
				pushType = 1
				item = Text(item)

			elif typeMenu.selected == "Link/URL":
				pushType = 0

			elif typeMenu.selected == "File":
				# if the item mime type is none, then we have an errror
				if Mime[itemFext] is not None:
					pushType = 2
				else
					itemErrorCode = 5
					itemErrorMsg = f"Extension: {itemFext}"


		# ------------ HANDLE ITEM --------------


		if pushType == typeId['link']:
			itemPushBody['type'] = 'link'
			itemPushBody['url'] = item
			curItemHandled = 1

		# note handler
		if pushType == typeId['note']:
			itemPushBody['type'] = 'note'
			itemPushBody['body'] = item
			curItemHandled = 1

		# file handler
		if pushType == typeId['file']:
			if itemFext == 'heic':
				item = ConvertImage(item, "JPEG")
				itemFext = GetFileDetails("File Extension", item)

			goodFileSize = 1

			if GetFileDetails("File Size", item).MegaBytes() > 25:
				if pushbulletPremium != 1:
					goodFileSize = 0

			if goodFileSize != 1:
				itemErrorCode = 1

			else
				itemMimeType = Mime[itemFext]

				text = f"{itemFname}.{itemFext}"

				# upload request
				UploadResponse = GetContentsOfURL(
						PushCall['upload_req_url'],
						method=POST,
						headers={
							"Access-Token" : PushCall['accesstoken']
						},
						type=JSON,
						body={
							'file_name': text,
							'file_type': itemMimeType
						}
					)

				text = UploadResponse['error']

				if text is not None:
					itemErrorCode = 6
					itemErrorMsg = text

				else
					GetContentsOfURL(
						UploadResponse['upload_url'],
						method=POST,
						headers={
							"Access-Token" : PushCall['accesstoken']
						},
						type=FORM,
						body={
							'file': item
						}
					)

					itemPushBody['type'] = 'file'
					itemPushBody['file_name'] = UploadResponse['file_name']
					itemPushBody['file_type'] = UploadResponse['file_type']
					itemPushBody['file_url'] = UploadResponse['file_url']

		# push the item
		if itemErrorCode == 0:
			res = GetContentsOfURL(
					PushCall['push_url'],
					method=POST,
					headers={
						"Access-Token" : PushCall['accesstoken']
					},
					type=JSON,
					body=itemPushBody
				)

			text = res['error']

			if text is not None:
				itemErrorCode = 6
				itemErrorMsg = text


		else:
			text = f'Item Name: {itemFname}, Error Code: {itemErrorCode}, Message: "{itemErrorMsg}"'
			failedPushes.append(text)

	if Count("Items", failedPushes) > 0:
		text = f'....{failedPushes}...' # pushbullet error request
		note = CreateNote(text)
		OpenNote(note)






